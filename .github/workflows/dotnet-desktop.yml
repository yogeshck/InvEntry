# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  # push:
  #   branches:
  #     - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Step 1: Checkout Code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0' # Adjust based on your target framework version
        include-prerelease: true

    # Step 3: Generate Semantic Version
    - name: Generate version
      id: versioning
      run: |
        echo "::set-output name=version::v1.0.$GITHUB_RUN_NUMBER"
      shell: bash

    # Step 4: Update All AssemblyInfo.cs Files
    - name: Update AssemblyInfo.cs files
      run: |
       Get-ChildItem -Recurse -Filter "AssemblyInfo.cs" | ForEach-Object {
       (Get-Content $_.FullName) -replace 'AssemblyVersion\(".*"\)', 'AssemblyVersion("${{ steps.versioning.outputs.version }}")' |
       Set-Content $_.FullName
       (Get-Content $_.FullName) -replace 'AssemblyFileVersion\(".*"\)', 'AssemblyFileVersion("${{ steps.versioning.outputs.version }}")' |
       Set-Content $_.FullName}

    # Step 5: Restore NuGet dependencies
    - name: Restore dependencies
      run: dotnet restore

    # Step 6: Build the application
    - name: Build the app
      run: dotnet build --configuration Release

    # Step 7: Publish the app
    - name: Publish the app
      run: dotnet publish -c Release -o ./output

    # Step 8: Archive build artifacts
    - name: Create ZIP of artifacts
      run: |
        Compress-Archive -Path ./output/* -DestinationPath WPF-Executable.zip

    # Step 9: Generate Release Notes
    - name: Generate release notes
      id: notes
      run: echo "Release Notes for ${{ steps.versioning.outputs.version }}" > release_notes.txt

    # Step 10: Create GitHub Release
    - name: Create GitHub Release
      id: create_release # Add an ID to capture the output
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.versioning.outputs.version }}
        release_name: Release ${{ steps.versioning.outputs.version }}
        body_path: release_notes.txt
        draft: false
        prerelease: false

    # Step 11: Upload Artifacts to GitHub Release
    - name: Upload Build Artifacts to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # Pass the upload_url from the previous step
        asset_path: ./WPF-Executable.zip
        asset_name: WPF-Executable.zip
        asset_content_type: application/zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
