# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  # push:
  #   branches:
  #     - master
  workflow_dispatch:

jobs:
  # Job 1: Build and Publish Both Projects
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.set_version.outputs.VERSION }} # Pass the version to other jobs
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # Generate a semantic version for this build
      - name: Generate Version
        id: set_version
        run: |
           echo "VERSION=1.0.${{ github.run_number }}" >> $GITHUB_ENV
           echo "TAG_VERSION=v1.0.${{ github.run_number }}" >> $GITHUB_ENV
           echo "::set-output name=VERSION::1.0.${{ github.run_number }}"
           echo "::set-output name=TAG_VERSION::v1.0.${{ github.run_number }}"

      # Build and publish InvEntry (WPF App)
      - name: Publish InvEntry (WPF App)
        run: |
            mkdir -p ./publish/InvEntry-${{ env.TAG_VERSION }}
            dotnet publish InvEntry/InvEntry.csproj -c Release -o ./publish/InvEntry-${{ env.TAG_VERSION }} /p:PublishProfile=FolderProfile /p:Version=${{ env.VERSION }}
        env:
           VERSION: ${{ steps.set_version.outputs.VERSION }}
           TAG_VERSION: ${{ steps.set_version.outputs.TAG_VERSION }}

      # Build and publish DataAccess (Web API)
      - name: Publish DataAccess (Web API)
        run: |
          mkdir -p ./publish/DataAccess-${{ env.TAG_VERSION }}
          dotnet publish DataAccess/DataAccess.csproj -c Release -o ./publish/DataAccess-${{ env.TAG_VERSION }} /p:PublishProfile=FolderProfile /p:Version=${{ env.VERSION }}
        env:
          VERSION: ${{ steps.set_version.outputs.VERSION }}
          TAG_VERSION: ${{ steps.set_version.outputs.TAG_VERSION }}

      # Zip both publish folders into a single artifact
      - name: Package Published Outputs
        run: |
          Compress-Archive -Path ./publish/InvEntry-${{ env.TAG_VERSION }}/* -DestinationPath ./InvEntry-${{ env.TAG_VERSION }}.zip
          Compress-Archive -Path ./publish/DataAccess-${{ env.TAG_VERSION }}/* -DestinationPath ./DataAccess-${{ env.TAG_VERSION }}.zip
          Compress-Archive -Path ./InvEntry-${{ env.TAG_VERSION }}.zip,./DataAccess-${{ env.TAG_VERSION }}.zip -DestinationPath ./PublishedProjects-${{ env.TAG_VERSION }}.zip
        env:
          VERSION: ${{ steps.set_version.outputs.VERSION }}

      # Upload Zipped Artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: PublishedProjects
          path: ./PublishedProjects-${{ env.VERSION }}.zip
        env:
          VERSION: ${{ steps.set_version.outputs.VERSION }}

  # Job 2: Create GitHub Release
  create_release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: Release ${{ needs.build.outputs.version }}
          body_path: release_notes.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 3: Upload Release Assets
  upload_assets:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: PublishedProjects

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./PublishedProjects-${{ needs.build.outputs.version }}.zip
          asset_name: PublishedProjects-${{ needs.build.outputs.version }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
